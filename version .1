local module = {}

function CheckCollide(v,w,x,y)
    local z = w / 2; local A = y / 2; local B = v - z; local C = v + z; local D = x - A; local E = x + A; if C.x < D.x or B.x > E.x then return false end; if C.y < D.y or B.y > E.y then return false end; if C.z < D.z or B.z > E.z then return false end; return true
end


local function getBoundingBox(obj)
    if tostring(obj):match("table: 0x") then
        if obj.position then
            return Vector3.one*3,CFrame.new(obj.position)
        elseif obj.getHealth then
            return Vector3.new(4, 5, 1),obj:getCFrame()
        elseif obj.setRotation then
            return obj:getSize(),obj:getCFrame()
        end
        return nil
    end
end


function module.raycast(origin:Vector3,direction:Vector3,filterIncludes)
    local endpoint = origin+direction
    local result = nil
    for alpha = 0,1,1/(origin-direction).magnitude do
        for i,v in filterIncludes do
            local size,cframe = getBoundingBox(v)   
            local collides = CheckCollide(cframe,size,CFrame.new(origin:lerp(endpoint,alpha)),Vector3.zero)
            if collides then
                result = {}
                result.Instance = v
                result.Position = origin:lerp(endpoint,alpha)
                result.Distance = (origin-result.Position).magnitude
            end
            
        end
        if result then break end
    end

    return result
end
